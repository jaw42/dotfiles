
" Pathogen
"""""""""""""""""""""""""""""""""""""""""""""""""""""
"filetype off " Pathogen needs to run before plugin indent on
"call pathogen#infect()
"call pathogen#helptags() " generate helptags for everything in 'runtimepath'
"filetype plugin indent on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vundle
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
let VundleInstalled=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')

if !filereadable(vundle_readme)
	echo "Installing Vundle.."
	echo ""
	silent !mkdir -p ~/.vim/bundle
	silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
	let VundleInstalled=0
endif

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
Bundle 'gmarik/vundle'

""""""""""""""""""""""""""""""""""""""""""""""""""
"             Add your Bundles Here              "
""""""""""""""""""""""""""""""""""""""""""""""""""
"Code tag view and navigation with ctags tags
Bundle 'majutsushi/tagbar'
"Align text to arbitary regexs
"Bundle 'godlygeek/tabular.git'
"Lightweight status bar with colors and info
" Bundle 'bling/vim-airline.git'
Bundle "t9md/vim-ezbar"
"Git change gutter info
" Bundle 'mhinz/vim-signify.git'
"Snippet management
Bundle 'SirVer/ultisnips.git'
Bundle 'honza/vim-snippets'
"Super tab completion
Bundle 'ervandew/supertab.git'
"Filesystem explorer
Bundle 'scrooloose/nerdtree.git'
"Easy changing, adding and removing of surround objects
Bundle 'tpope/vim-surround'
"Closing of brackets, tags, quotes etc.
Bundle 'Raimondi/delimitMate'
"Override detection of .md files to markdown
Bundle 'tpope/vim-markdown'
"Molokai theme ported from TextMate
Bundle 'tomasr/molokai'
"Syntax checking for a wide range of languages
Bundle 'scrooloose/syntastic'
"Batch rename files inside vim
Bundle 'vim-scripts/renamer.vim'
"Easy commenting/uncommenting of code.
Bundle 'tpope/vim-commentary'
"JavaDoc creation from templates based on cursor position
Bundle 'JLimperg/jcommenter.vim'
"Swap selection or movement between two locations
Bundle 'tommcdo/vim-exchange'
Bundle 'tommcdo/vim-lion'
Bundle 'tpope/vim-fugitive'
" Bundle 'spolu/dwm.vim'
Bundle 'tpope/vim-unimpaired'

if VundleInstalled == 0
	echo "Installing Bundles, please ignore key map error messages"
	echo ""
	:BundleInstall
endif

set nocompatible
filetype off

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""" Ctrl-p plugin
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_match_window_bottom   = 0
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_working_path_mode     = 0
let g:ctrlp_use_caching           = 1
let g:ctrlp_dotfiles              = 1
let g:ctrlp_switch_buffer         = 'Et'
let g:ctrlp_custom_ignore         = '\v\~$|\.(o|swp|pyc|wav|mp3|ogg)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|__init__\.py'
let g:ctrlp_max_depth             = 10
let g:ctrlp_lazy_update           = 1

let g:ctrlp_cmd = 'CtrlPMixed'
"let g:ctrlp_map = '<c-p>'
let g:ctrlp_map = '<leader>t'

"""" UltiSnips Plugin
set runtimepath^=~/.vim/custom
let g:UltiSnipsSnippetsDir        = "~/.vim/custom/mysnippets"
let g:UltiSnipsSnippetDirectories =["UltiSnips","mysnippets"]
let g:UltiSnipsEditSplit          = "vertical"

let g:UltiSnipsExpandTrigger      ="<tab>"
let g:UltiSnipsJumpForwardTrigger ="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

"""" Airline Status
let g:airline_right_sep=''
let g:airline_left_sep =''

"""" Vim-Latex
let g:Tex_CompileRule_pdf = 'pdflatex -interaction=nonstopmode $*'
let g:Tex_DefaultTargetFormat = 'pdf'

"""" Molokai Theme
let g:molokai_original = 1

"""" TagList
let Tlist_Use_Right_Window     = 1
let Tlist_Enable_Fold_Column   = 0
let Tlist_File_Fold_Auto_Close = 1
let Tlist_Sort_Type            = "order"

"""" Netrw
let g:netrw_liststyle = 1
let g:netrw_sort_options = 'i'
let g:netrw_list_hide= '.*\.class$'
augroup netrw
	autocmd!
	autocmd VimEnter * if !argc() | Explore | endif
	" autocmd VimEnter * if isdirectory(expand('<afile>')) | Explore | endif
augroup END

""" Supertab
let g:SuperTabCrMapping = 0 "Needed to allow delimitMate_expand_cr
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabContextDefaultCompletionType = "<c-n>"

"""" delimitMate
let delimitMate_jump_expansion = 0
let delimitMate_expand_cr = 2
let delimitMate_expand_space = 1

augroup RemoveNumbers
	autocmd!
	autocmd FileType taglist set norelativenumber
	autocmd FileType taglist set nonumber
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" from an idea by michael naumann
function! VisualSearch(direction) range
	let l:saved_reg = @"
	execute "normal! vgvy"

	let l:pattern = escape(@", '\\/.*$^~[]')
	let l:pattern = substitute(l:pattern, "\n$", "", "")

	if a:direction == 'b'
		execute "normal ?" . l:pattern . "^M"
	elseif a:direction == 'gv'
		call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
	elseif a:direction == 'f'
		execute "normal /" . l:pattern . "^M"
	endif

	let @/ = l:pattern
	let @" = l:saved_reg
endfunction

" View the difference between the buffer and the file the last time it was saved
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis
""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""
set encoding=utf-8
set history=700

filetype plugin on
filetype indent on

"Auto read when a file changes from the outside
set autoread

"Save files automatically before acting on them, eg make
set autowrite

"Make the default make program as make
set makeprg=make

"Include the parent directory in the path to search, eg for 'gf'
set path+=../**

"Show line numbers relative and absolute
if exists("&relativenumber")
	set relativenumber
endif
set number

" Highlight the line the cursor is currently on
set cursorline

"Hide buffers instead of closing them
set hidden

""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Specify the behavior when switching between buffers
set switchbuf=usetab
set showtabline=1

" Set 7 lines to the cursor - when moving vertically using j/k
set scrolloff=5

" Turn on the Wild menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*.class        "Ignore VCS
if exists("&wildignorecase")
	set wildignorecase
endif

"Always show current position
set ruler

" Height of the command bar
set cmdheight=1

" Show “invisible” characters
"set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
set listchars=tab:·\ ,trail:▸,nbsp:#
set list

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" When searching try to be smart about cases
set ignorecase
set smartcase

" Highlight search results
set hlsearch
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Program to use for grep
if executable('ag')
	set grepprg=ag\ --nogroup\ --nocolor
else
	set grepprg=grep\ -RinH\ $*
endif
set keywordprg=""

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set matchtime=8

" Give visual feedback when the <leader> key is pressed
set showcmd

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Smooth scrolling with the mouse
set mouse=a

" Undo
if exists("&undofile")
	set undofile
	set undodir=~/.vim/undodir
	augroup undo
		autocmd!
		autocmd BufWritePre /tmp/* setlocal noundofile
	augroup END
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => UI
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set guifont=Inconsolata\ Medium\ 11
set guifont=Droid\ Sans\ Mono\ 10
" Gvim
if has("gui_running")
	set guioptions-=m     "remove menu bar
	set guioptions-=T     "remove tool bar
	set guioptions-=r     "remove left scroll
	set guioptions-=l     "remove right scroll
	set guioptions-=L     "left hand toolbar isn't present
	" set guioptions+=P     "allow visual selection to be accessed in system paste
	set guioptions+=c     "use console dialogues
endif

if exists("&colorcolumn")
	set colorcolumn=+1
else
	:mat ErrorMsg '\%81v.\+'
endif
set formatoptions=tcroql
silent! set formatoptions+=j

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use and read modelines in files
set modeline

" Be smart when using tabs
set smarttab

" Don't break across words
set linebreak

" Wrap text
set textwidth=79 wrapmargin=0

set autoindent "Auto indent
set smartindent "Smart indent
set wrap "Wrap lines

set noexpandtab
set copyindent
set preserveindent
set softtabstop=0
set shiftwidth=4
set tabstop=4

" split and be active in split instead of original
set splitbelow
set splitright

"Don't add empty new lines at the end of files
set noeol

"Automatically change to directory of working file
"if exists("+autochdir")
"	set autochdir
"endif
"augroup Path
"	autocmd!
"	autocmd BufEnter * silent! lcd %:p:h
"augroup END

augroup Rout
	autocmd BufEnter,BufNew *.rout,*.Rout set ft=r
augroup END

" File templates
au! BufNewFile * silent! 0r $HOME/.vim/skel/template.%:e

""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
"  In visual mode when you press * or # to search for the current selection
vnoremap <silent> * :call VisualSearch('f')<CR>
vnoremap <silent> # :call VisualSearch('b')<CR>

" When you press gv you vimgrep after the selected text
vnoremap <silent> gv :call VisualSearch('gv')<CR>

" Replace selected text
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>

syntax on
set synmaxcol=1024

colorscheme molokai

"""""""""""""""""""""""""""""
" => Files and filetypes
"""""""""""""""""""""""""""""
" Use unix as the standard filetype
set ffs=unix,dos,mac

" backup to ~/.tmp
set backup
set backupdir=/var/tmp,/tmp
set directory=/var/tmp,/tmp
set writebackup

"""""""""""""""""""""""""""""
" => Keybindings
"""""""""""""""""""""""""""""
nnoremap ; :

" Make j and k move to the next row on screen rather
nmap j gj
nmap k gk
nnoremap n nzz
nnoremap N Nzz

nnoremap Q :normal n.<CR>

" Easier movement to begining/end of line
nnoremap B ^
nnoremap E g_

" Visually select the last inserted text
nmap gV `[v`]

" Re-indent whole file
nnoremap g+ :call Preserve("normal gg=G")<CR>

nnoremap c] :cn<return>
nnoremap c[ :cp<return>

map <leader>rc :e! ~/.vimrc<CR>
augroup Reload_vimrc
	autocmd!
	autocmd BufWritePost $MYVIMRC source $MYVIMRC | echo "vimrc is sourced"
augroup END

"Inserting blank lines without entering insert mode.
" nnoremap <C-J> m`o<Esc>``
" nnoremap <C-K> m`O<Esc>``

" Fast saving
nmap <leader>w :w!<cr>
cmap w!! w !sudo tee > /dev/null %
augroup Save
	autocmd!
	au FocusLost * :silent! wa
augroup END

" Toggle line numbers for the current file
nmap <leader>l :setlocal relativenumber!<CR>

" Save the current file and run the make program
map <F9>   :make<Return>
map <S-F9> :silent make<Return>
map <F10>  :copen<Return>:cprevious<Return>
map <F11>  :copen<Return>:cnext<Return>

" Open the taglist sidebar
nnoremap <silent> <F8> :TagbarToggle<CR>

"Toggle NERDTree sidebar
nmap <F7>   :NERDTreeToggle<CR>
imap <F7>   :NERDTreeToggle<CR>
nmap <S-F7> :NERDTreeFind<CR>
imap <S-F7> :NERDTreeFind<CR>

" Unset highlighting of a search
nmap <leader>q :nohlsearch<CR>

" Switch to Next and Previous buffer
nmap <C-n> :bnext<CR>
nmap <C-p> :bprev<CR>

nmap <leader>v "+gP
imap <leader>v <ESC>"+gpa
nmap <leader>ay ggVG"+y

"           Scroll Wheel = Up/Down 4 lines
"   Shift + Scroll Wheel = Up/Down 1 page
" Control + Scroll Wheel = Up/Down 1/2 page
noremap  <ScrollWheelUp>    6<C-Y>
noremap  <ScrollWheelDown>  6<C-E>
noremap  <S-ScrollWheelUp>   <C-Y>
noremap  <S-ScrollWheelDown> <C-E>
noremap  <C-ScrollWheelUp>   <C-U>
noremap  <C-ScrollWheelDown> <C-D>
inoremap <ScrollWheelUp>     <C-O>4<C-Y>
inoremap <ScrollWheelDown>   <C-O>4<C-E>
inoremap <S-ScrollWheelUp>   <C-O><C-Y>
inoremap <S-ScrollWheelDown> <C-O><C-E>
inoremap <C-ScrollWheelUp>   <C-O><C-U>
inoremap <C-ScrollWheelDown> <C-O><C-D>
map      <MiddleMouse>       <LeftMouse>
imap     <MiddleMouse>       <LeftMouse>
map      <2-MiddleMouse>     <LeftMouse>
imap     <2-MiddleMouse>     <LeftMouse>
map      <3-MiddleMouse>     <LeftMouse>
imap     <3-MiddleMouse>     <LeftMouse>
map      <4-MiddleMouse>     <LeftMouse>
imap     <4-MiddleMouse>     <LeftMouse>

nmap <leader>b :ls<CR>:buffer<Space>
