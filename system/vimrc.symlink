"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pathogen
"""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype off " Pathogen needs to run before plugin indent on
call pathogen#infect()
call pathogen#helptags() " generate helptags for everything in 'runtimepath'
filetype plugin indent on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""" Ctrl-p plugin
set runtimepath^=~/.vim/bundle/ctrlp.vim
"let g:ctrlp_map = '<leader>t'
let g:ctrlp_match_window_bottom = 0
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_dotfiles = 1
let g:ctrlp_custom_ignore = '\v\~$|\.(o|swp|pyc|wav|mp3|ogg|blend)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|__init__\.py'

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlPMixed'

"default to opening in new tab
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-t>'],
    \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
    \ }

"""" UltiSnips Plugin
let g:UltiSnipsSnippetsDir = "~/.vim/bundle/ultisnips.vim/UltiSnips"

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" Airline Status
let g:airline_right_sep=''
let g:airline_left_sep=''
let g:airline_theme='badwolf'

"""" Latex-Box
let g:tex_flavour = 'latex'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! <SID>TrimBlankLines()
	:silent! %!cat -s
endfunction

" Remove empty line at the end of page
function! <SID>TrimEndLines()
	let save_cursor = getpos(".")
	:silent! %s#\($\n\s*\)\+\%$##
	call setpos('.', save_cursor)
endfunction

" Remove trailing spaces
function! <SID>StripTrailingWhitespaces()
	" Preparation: save last search, and cursor position.
	let _s=@/
	let l = line(".")
	let c = col(".")
	" Do the business:
	%s/\s\+$//e
	" Clean up: restore previous search history, and cursor position
	let @/=_s
	call cursor(l, c)
endfunction
" from an idea by michael naumann
function! VisualSearch(direction) range
	let l:saved_reg = @"
	execute "normal! vgvy"

	let l:pattern = escape(@", '\\/.*$^~[]')
	let l:pattern = substitute(l:pattern, "\n$", "", "")

	if a:direction == 'b'
		execute "normal ?" . l:pattern . "^M"
	elseif a:direction == 'gv'
		call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
	elseif a:direction == 'f'
		execute "normal /" . l:pattern . "^M"
	endif

	let @/ = l:pattern
	let @" = l:saved_reg
endfunction

" Smart tab completion and tab insert
function! Smart_TabComplete()
	let line = getline('.')                         " current line

	let substr = strpart(line, -1, col('.')+1)      " from the start of the current
		                                              " line to one character right
		                                              " of the cursor
	let substr = matchstr(substr, "[^ \t]*$")       " word till cursor
	if (strlen(substr)==0)                          " nothing to match on empty string
		return "\<tab>"
	endif
	let has_period = match(substr, '\.') != -1      " position of period, if any
	let has_slash = match(substr, '\/') != -1       " position of slash, if any
	if (!has_period && !has_slash)
		return "\<C-X>\<C-P>"                         " existing text matching
	elseif ( has_slash )
		return "\<C-X>\<C-F>"                         " file matching
	else
		return "\<C-X>\<C-O>"                         " plugin matching
	endif
endfunction
""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""
set encoding=utf-8
set history=700

filetype plugin on
filetype indent on

"Auto read when a file changes from the outside
set autoread

"Show line numbers
set number

"let g:indentLine_char = ':'
"let g:indentLine_color_term = 239

" Highlight the line the cursor is currently on
set cursorline

""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Format the status line --- Now in separate plugin
"set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Specify the behavior when switching between buffers
set switchbuf=usetab
set stal=2

" Set 7 lines to the cursor - when moving vertically using j/k
set scrolloff=3

" Turn on the WiLd menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc

"Always show current position
set ruler

" Height of the command bar
set cmdheight=1

" A buffer becomes hidden when it is abandoned
set hid

" Show “invisible” characters
"set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
set lcs=tab:·\ ,trail:▸,nbsp:_
set list

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Program to use for grep
set grepprg=grep\ -nH\ $*

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=8

" Give visual feedback when the <leader> key is pressed
set showcmd

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Smooth scrolling with the mouse
set mouse=a

" Undo
set undofile
set undodir=~/.vim/undodir

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => UI
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Gvim
if has("gui_running")
	set guioptions-=m     "remove menu bar
	set guioptions-=T     "remove tool bar
	set guioptions-=r     "remove left scroll
	set guioptions-=l     "remove right scroll
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use and read modelines in files
set modeline

" Use spaces instead of tabs
"set expandtab

" Be smart when using tabs
set smarttab

" Don't break across words
set linebreak

" Wrap text but don't automatically add linebreaks.
set textwidth=80 wrapmargin=0

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

set noexpandtab
set copyindent
set preserveindent
set softtabstop=0
set shiftwidth=0
set tabstop=2

"Don't add empty new lines at the end of files
set noeol

"set guioptions=ac

" Auto remove when saving
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()
autocmd BufWritePre * :call <SID>TrimEndLines()
" autocmd BufWritePre * :call <SID>TrimBlankLines()

""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
"  In visual mode when you press * or # to search for the current selection
vnoremap <silent> * :call VisualSearch('f')<CR>
vnoremap <silent> # :call VisualSearch('b')<CR>

" When you press gv you vimgrep after the selected text
vnoremap <silent> gv :call VisualSearch('gv')<CR>

" Replace selected text
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>>

syntax on
set synmaxcol=2048

if has('gui_running')
	colorscheme molokai
else
	colorscheme monokai
endif

highlight Normal ctermbg=235


" Returns true if paste mode is enabled
function! HasPaste()
	if &paste
		return 'PASTE MODE  '
	en
	return ''
endfunction

"""""""""""""""""""""""""""""
" => Files and filetypes
"""""""""""""""""""""""""""""
" Use unix as the standard filetype
set ffs=unix,dos,mac

" Don't create swp files
"set noswapfile
"set nobackup

" backup to ~/.tmp
set backup
set backupdir=/var/tmp,/tmp
set directory=/var/tmp,/tmp
set writebackup

"""""""""""""""""""""""""""""
" => Keybindings
"""""""""""""""""""""""""""""
nnoremap ; :

" Make j and k move to the next row on screen rather
nmap j gj
nmap k gk

map <leader>rc :e! ~/.vimrc<CR>
au! bufwritepost .vimrc source ~/.vimrc | echo "vimrc has been sourced"

" Tab completion of commands
"imap <Tab> <C-N>
"inoremap <tab> <c-r>=Smart_TabComplete()<CR>

" Fast saving
nmap <leader>w :w!<cr>

noremap <leader>o <Esc>:CommandT<CR>
noremap <leader>O <Esc>:CommandTFlush<CR>
noremap <leader>m <Ese>:CommandTBuffer<CR>

" Toggle line numbers for the current file
nmap <leader>l :setlocal number!<CR>

" Unset highlighting of a search
nmap <leader>q :nohlsearch<CR>

" Switch to Next and Previous buffer
nmap <C-n> :bnext<CR>
nmap <C-p> :bprev<CR>

" Change size of window split
nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>

nmap <leader>v "+gP
imap <leader>v <ESC>"+gPa

"           Scroll Wheel = Up/Down 4 lines
"   Shift + Scroll Wheel = Up/Down 1 page
" Control + Scroll Wheel = Up/Down 1/2 page
noremap <ScrollWheelUp>     6<C-Y>
noremap <ScrollWheelDown>   6<C-E>
noremap <S-ScrollWheelUp>   <C-Y>
noremap <S-ScrollWheelDown> <C-E>
noremap <C-ScrollWheelUp>   <C-U>
noremap <C-ScrollWheelDown> <C-D>
inoremap <ScrollWheelUp>     <C-O>4<C-Y>
inoremap <ScrollWheelDown>   <C-O>4<C-E>
inoremap <S-ScrollWheelUp>   <C-O><C-Y>
inoremap <S-ScrollWheelDown> <C-O><C-E>
inoremap <C-ScrollWheelUp>   <C-O><C-U>
inoremap <C-ScrollWheelDown> <C-O><C-D>
