"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pathogen
"""""""""""""""""""""""""""""""""""""""""""""""""""""
"filetype off " Pathogen needs to run before plugin indent on
"call pathogen#infect()
"call pathogen#helptags() " generate helptags for everything in 'runtimepath'
"filetype plugin indent on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vundle
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
let VundleInstalled=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')

if !filereadable(vundle_readme)
	echo "Installing Vundle.."
	echo ""
	silent !mkdir -p ~/.vim/bundle
	silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
	let VundleInstalled=0
endif

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
Bundle 'gmarik/vundle'


""""""""""""""""""""""""""""""""""""""""""""""""""
"             Add your Bundles Here              "
""""""""""""""""""""""""""""""""""""""""""""""""""
"Code tag view and navigation
"Bundle 'majutsushi/tagbar'
"Align text to arbitary regexs
Bundle 'godlygeek/tabular.git'
"Lightweight status bar with colors and info
Bundle 'bling/vim-airline.git'
"Git change gutter info
Bundle 'mhinz/vim-signify.git'
"Snippet management
Bundle 'SirVer/ultisnips.git'
"Super tab completion
Bundle 'ervandew/supertab.git'
"Latex tools, completion and build scripts
Bundle 'LaTeX-Box-Team/LaTeX-Box.git'
"Filesystem explorer
Bundle 'scrooloose/nerdtree.git'
"Fuzzy file finder
Bundle 'kien/ctrlp.vim.git'
"Todo.txt highlighting and shortcuts
Bundle 'freitass/todo.txt-vim'
"Easy changing, adding and removing of surround objects
Bundle 'tpope/vim-surround'
"Closing of brackets, tags, quotes etc.
Bundle 'Raimondi/delimitMate'
"Override detection of .md files to markdown
Bundle 'tpope/vim-markdown'
"Solarised theme
Bundle 'tomasr/molokai'
"Syntax checking for a wide range of languages
Bundle 'scrooloose/syntastic'
"Batch rename files inside vim
Bundle 'vim-scripts/renamer.vim'
Bundle 'tpope/vim-commentary'
"...All your other bundles...

if VundleInstalled == 0
	echo "Installing Bundles, please ignore key map error messages"
	echo ""
	:BundleInstall
endif

set nocompatible
filetype off

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""" Ctrl-p plugin
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_match_window_bottom = 0
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_use_caching = 1
let g:ctrlp_dotfiles = 1
let g:ctrlp_switch_buffer = 'Et'
let g:ctrlp_custom_ignore = '\v\~$|\.(o|swp|pyc|wav|mp3|ogg|blend)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|__init__\.py'
let g:ctrlp_max_depth = 10
let g:ctrlp_lazy_update = 1

let g:ctrlp_cmd = 'CtrlPMixed'
"let g:ctrlp_map = '<c-p>'
let g:ctrlp_map = '<leader>t'

"""" UltiSnips Plugin
set runtimepath^=~/.vim/custom
let g:UltiSnipsSnippetsDir = "~/.vim/custom/mysnippets"
let g:UltiSnipsSnippetDirectories=["UltiSnips","mysnippets"]
let g:UltiSnipsEditSplit = "vertical"

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

"""" Airline Status
let g:airline_right_sep=''
let g:airline_left_sep=''

"""" Latex-Box
let g:tex_flavour = 'latex'

"""" Molokai Theme
let g:molokai_original = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove empty line at the end of page
function! <SID>TrimEndLines()
	let save_cursor = getpos(".")
	:silent! %s#\($\n\s*\)\+\%$##
	call setpos('.', save_cursor)
endfunction

" Remove trailing spaces
function! <SID>StripTrailingWhitespaces()
	if exists('b:noStripWhitespace')
        return
    endif

	" Preparation: save last search, and cursor position.
	let _s=@/
	let l = line(".")
	let c = col(".")
	" Do the business:
	%s/\s\+$//e
	" Clean up: restore previous search history, and cursor position
	let @/=_s
	call cursor(l, c)
endfunction

" from an idea by michael naumann
function! VisualSearch(direction) range
	let l:saved_reg = @"
	execute "normal! vgvy"

	let l:pattern = escape(@", '\\/.*$^~[]')
	let l:pattern = substitute(l:pattern, "\n$", "", "")

	if a:direction == 'b'
		execute "normal ?" . l:pattern . "^M"
	elseif a:direction == 'gv'
		call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
	elseif a:direction == 'f'
		execute "normal /" . l:pattern . "^M"
	endif

	let @/ = l:pattern
	let @" = l:saved_reg
endfunction

" Tabular auto table
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
	let p = '^.*|.*|.*$'
	"if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
	if exists(':Tabularize') && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
		let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
		let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
		Tabularize/|/l1
		normal! 0
		call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
	endif
endfunction

" View the difference between the buffer and the file the last time it was saved
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis
""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""
set encoding=utf-8
set history=700

filetype plugin on
filetype indent on

"Auto read when a file changes from the outside
set autoread

"Include the parent directory in the path to search, eg for 'gf'
set path+=../**

"Show line numbers relative and absolute
if exists("&relativenumber")
	set relativenumber
endif
set number

" Highlight the line the cursor is currently on
set cursorline

"Hide buffers instead of closing them
set hidden

"Use the same buffer for all clipboard related things
"if has('unnamedplus')
"	set clipboard=unnamedplus
"endif

""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Format the status line --- Now in separate plugin
"set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Specify the behavior when switching between buffers
set switchbuf=usetab
set showtabline=1

" Set 7 lines to the cursor - when moving vertically using j/k
set scrolloff=3

" Turn on the WiLd menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*        "Ignore VCS

"Always show current position
set ruler

" Height of the command bar
set cmdheight=1

" Show “invisible” characters
"set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
set lcs=tab:·\ ,trail:▸,nbsp:_
set list

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Program to use for grep
set grepprg=grep\ -nH\ $*

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set matchtime=8

" Give visual feedback when the <leader> key is pressed
set showcmd

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Smooth scrolling with the mouse
set mouse=a

" Undo
"set undofile
"set undodir=~/.vim/undodir

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => UI
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Gvim
if has("gui_running")
	set guioptions-=m     "remove menu bar
	set guioptions-=T     "remove tool bar
	set guioptions-=r     "remove left scroll
	set guioptions-=l     "remove right scroll
	set guioptions-=L     "left hand toolbar isn't present
	set guioptions+=P     "allow visual selection to be accessed in system paste
	set guioptions+=c     "use console dialogues
endif

if exists("&colorcolumn")
	set colorcolumn=+1
endif
set formatoptions=tcroql

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use and read modelines in files
set modeline

" Be smart when using tabs
set smarttab

" Don't break across words
set linebreak

" Wrap text
set textwidth=79 wrapmargin=0

set autoindent "Auto indent
set smartindent "Smart indent
set wrap "Wrap lines

set noexpandtab
set copyindent
set preserveindent
set softtabstop=0
set shiftwidth=4
set tabstop=4

" split and be active in split instead of original
set splitbelow
set splitright

"Don't add empty new lines at the end of files
set noeol

"Automatically change to directory of working file
"if exists("+autochdir")
"	set autochdir
"endif
augroup Path
	autocmd!
	autocmd BufEnter * silent! lcd %:p:h
augroup END

" Auto remove when saving
augroup Clean
	autocmd!
	autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()
	autocmd BufWritePre * :call <SID>TrimEndLines()
augroup END

autocmd FileType mail,markdown let b:noStripWhitespace=1

""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
"  In visual mode when you press * or # to search for the current selection
vnoremap <silent> * :call VisualSearch('f')<CR>
vnoremap <silent> # :call VisualSearch('b')<CR>

" When you press gv you vimgrep after the selected text
vnoremap <silent> gv :call VisualSearch('gv')<CR>

" Replace selected text
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>>

syntax on
set synmaxcol=2048

colorscheme molokai
"if has('gui_running')
"else
"	colorscheme molokai
"endif

"highlight Normal ctermbg=235

"""""""""""""""""""""""""""""
" => Files and filetypes
"""""""""""""""""""""""""""""
" Use unix as the standard filetype
set ffs=unix,dos,mac

" Don't create swp files
"set noswapfile
"set nobackup

" backup to ~/.tmp
set backup
set backupdir=/var/tmp,/tmp
set directory=/var/tmp,/tmp
set writebackup

"""""""""""""""""""""""""""""
" => Keybindings
"""""""""""""""""""""""""""""
nnoremap ; :

" Make j and k move to the next row on screen rather
nmap j gj
nmap k gk

map <leader>rc :e! ~/.vimrc<CR>
augroup reload_vimrc
	autocmd!
	autocmd BufWritePost $MYVIMRC source $MYVIMRC | echo "vimrc has been sourced"
augroup END

" Fast saving
nmap <leader>w :w!<cr>
cmap w!! w !sudo tee > /dev/null %

" Save the current file and run the make program
map <F9> :w<CR>:make<CR>
" Toggle line numbers for the current file
nmap <leader>l :setlocal number!<CR>

"Toggle NERDTree sidebar
nmap <F7> :NERDTreeToggle<CR>
imap <F7> :NERDTreeToggle<CR>
nmap <S-F7> :NERDTreeFind<CR>
imap <S-F7> :NERDTreeFind<CR>

" Unset highlighting of a search
nmap <leader>q :nohlsearch<CR>

" Switch to Next and Previous buffer
nmap <C-n> :bnext<CR>
nmap <C-p> :bprev<CR>

" Change size of window split
nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>

nmap <leader>v "+gP
imap <leader>v <ESC>"+gPa

"           Scroll Wheel = Up/Down 4 lines
"   Shift + Scroll Wheel = Up/Down 1 page
" Control + Scroll Wheel = Up/Down 1/2 page
noremap <ScrollWheelUp>     6<C-Y>
noremap <ScrollWheelDown>   6<C-E>
noremap <S-ScrollWheelUp>   <C-Y>
noremap <S-ScrollWheelDown> <C-E>
noremap <C-ScrollWheelUp>   <C-U>
noremap <C-ScrollWheelDown> <C-D>
inoremap <ScrollWheelUp>     <C-O>4<C-Y>
inoremap <ScrollWheelDown>   <C-O>4<C-E>
inoremap <S-ScrollWheelUp>   <C-O><C-Y>
inoremap <S-ScrollWheelDown> <C-O><C-E>
inoremap <C-ScrollWheelUp>   <C-O><C-U>
inoremap <C-ScrollWheelDown> <C-O><C-D>
